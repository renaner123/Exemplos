package br.edu.ifsc.lased.daf.sefapi.services;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import picocli.CommandLine.Command;
import picocli.CommandLine.Model.CommandSpec;
import picocli.CommandLine.Option;
import picocli.CommandLine.Spec;


@Data
@Slf4j
@Command(name = "modoOperacao", description = "Processo para alterar o modo de operação do DAF na SEF")
public class DefaultPicoCli {
    
        @Spec
        CommandSpec spec;
        @Command(name = "confirmar", description = "Executa algum processo")
        public String confirmarModoOperacao(
            @Option(names = { "-d",
                    "--dir" }, required = true, description = "Diretório") String sefKeyFile,
            @Option(names = { "-a",
                    "--alg" }, required = true, description = "Algoritmo utilizado") String algoritmoAteste,
            @Option(names = { "-i",
                    "--infos" }, required = true, description = "JSON com informações") String infos)           
            
            throws Exception {            
                return infosDAF;
            }
    
    
}



/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package br.edu.ifsc.lased.daf.sefapi;

import br.edu.ifsc.lased.daf.sefapi.services.AlteracaoModoOperacao;
import br.edu.ifsc.lased.daf.sefapi.services.Registrar;
import br.edu.ifsc.lased.daf.sefapi.services.Remover;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.ParseResult;


@Slf4j
@Data
@Command(name = "java -jar sef-simulador.jar", version = "sef-simulador 1.0", mixinStandardHelpOptions = true, subcommands = {
        Registrar.class, Remover.class, AlteracaoModoOperacao.class,
        CommandLine.HelpCommand.class })
public class SefSimulador {

    public static void main(String[] args) {
        CommandLine cmdLine = new CommandLine(new SefSimulador());
        String result = null;

        // executa o comando com parser dos argumentos e retorna o código de saída do
        // Comando principal.
        int exitCode = cmdLine.execute(args);

        // Verifica se existe subComando
        ParseResult subCmd = cmdLine.getParseResult().subcommand();
        if (subCmd != null) {
            // Verifica se existe subSubComando
            ParseResult subSubCmd = subCmd.subcommand();
            if (subSubCmd != null) {
                // recupera valor retornado pelo subSubComando
                result = subSubCmd.commandSpec().commandLine().getExecutionResult();
            }
        }

        if (result == null) {
            System.exit(1);
        }
        log.info(result);
        System.out.println(result);
        System.exit(exitCode);
    }
}














